<%@ CodeTemplate Inherits="CodeTemplate" Language="C#" TargetLanguage="Text" Description="NetTiers main template."  Debug="True" ResponseEncoding="UTF-8" %>


<%-- 注册实体层Entity模板 --%>
<%@ Register Name="EntityTemplate" Template="Model.cst" MergeProperties="Flase" ExcludeProperties=""%>
<%@ Register Name="ViewTemplate" Template="Model_View.cst" MergeProperties="Flase" ExcludeProperties=""%> 
<%@ Register Name="CommandTemplate" Template="Model_Command.cst" MergeProperties="Flase" ExcludeProperties=""%> 




<%-- 数据库 --%>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" DeepLoad="True" Optional="False" 
Category="数据库连接"  
Description="Database that the tables views, and stored procedures should be based on. IMPORTANT!!! If SourceTables and SourceViews are left blank, 
the Entire Database will then be generated." %>


<%
//创建实体层Entity类
this.GenerateEntityClasses();

Debug.WriteLine("OK");
%>

<script runat="template">
    //生成实体Entity类
    private void GenerateEntityClasses()
    {
        CodeTemplate Template = new EntityTemplate();
        string FileDirectory;
        foreach(TableSchema table in this.SourceDatabase.Tables)
        {
            FileDirectory = OutputDirectory + "\\"  + table.Name + ".cs";
            //生成模板
            Template.SetProperty("SourceTable",table);
            Template.SetProperty("ModelName",table.Name);
            Template.SetProperty("NameSpace",NameSpace);
            //文件输出
            Template.RenderToFile(FileDirectory,true);
           
            Debug.WriteLine(FileDirectory +" 创建成功.");
        }
        
       CodeTemplate TemplateView = new ViewTemplate();
       foreach(ViewSchema table in this.SourceDatabase.Views)
       {
           FileDirectory = ViewDirectory + "\\"  + table.Name + ".cs";
           //生成模板
           TemplateView.SetProperty("SourceView",table);
           TemplateView.SetProperty("ModelName",table.Name);
           TemplateView.SetProperty("NameSpace",NameSpace);
           //文件输出
           TemplateView.RenderToFile(FileDirectory,true);          
           Debug.WriteLine(FileDirectory +" 创建成功.");
       }
       
      CodeTemplate templatecommand = new CommandTemplate();
      foreach(CommandSchema command in this.SourceDatabase.Commands)
      {
          FileDirectory = CommandDirectory + "\\"  + command.Name + ".cs";
          //生成模板
          templatecommand.SetProperty("SourceCommand",command);
          templatecommand.SetProperty("ModelName",command.Name);
          templatecommand.SetProperty("NameSpace",NameSpace);
          //文件输出
          templatecommand.RenderToFile(FileDirectory,true);          
          Debug.WriteLine(FileDirectory +" 创建成功.");
      }
     
        
    }
</script>


<script runat="template">
    //解决方案输出路径
    private string Directory = "C:\\Repos\\ScientificResearch\\ScientificResearch\\Models\\Table";
    private string NameSpace="ScientificResearch.Models";
    //视图输出路径
    private string View_Directory="C:\\Repos\\ScientificResearch\\ScientificResearch\\Models\\View";
    
	//存储过程输出路径
    private string Command_Directory="C:\\Repos\\ScientificResearch\\ScientificResearch\\Models\\Sp";

    [Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
    [Optional, NotChecked]
    [DefaultValue("")]
    public string OutputDirectory 
    { 
        get
        {
            return Directory;
        }
        set
        {
            if (value.EndsWith("\\")) value = value.Substring(0, value.Length - 1);
            Directory = value;
        } 
    }
    [Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
    [Optional, NotChecked]
    [DefaultValue("")]
    public string ViewDirectory 
    { 
        get
        {
            return View_Directory;
        }
        set
        {
            if (value.EndsWith("\\")) value = value.Substring(0, value.Length - 1);
            View_Directory = value;
        } 
    }
   
    [Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
    [Optional, NotChecked]
    [DefaultValue("")]
    public string CommandDirectory 
    { 
        get
        {
            return Command_Directory;
        }
        set
        {
            if (value.EndsWith("\\")) value = value.Substring(0, value.Length - 1);
            Command_Directory = value;
        } 
    }
    
    
    [Optional, NotChecked]
    [DefaultValue("Model")]
    public string outNameSpace 
    { 
        get
        {
            return NameSpace;
        }
        set
        {
            if (value.EndsWith("\\")) value = value.Substring(0, value.Length - 1);
            NameSpace = value;
        } 
    }
</script>